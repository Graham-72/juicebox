<?php

/**
 * @file
 * Provides Drupal integration with the Juicebox gallery library.
 */


/**
 * Implements hook_menu().
 */
function juicebox_menu() {
  $items = array();
  // Add menu item that produces the "config.xml" data that is linked to a
  // specific view.
  $items['juicebox/xml/%'] = array(
    'title' => 'Juicebox XML from view',
    'description' => '',
    'page callback' => 'juicebox_page_xml',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}


// Callback for the menu item that generates Juicebox XML linked to a specific
// page containing embed code.
function juicebox_page_xml() {
  $got_result = FALSE;
  // We don't always know exactly how many args are being passed, so we have to
  // fetch them programmatically with func_get_args()
  $args = func_get_args();
  // Depending on the type of embed case we are dealing with we need to
  // construct the XML in different ways.
  if ($args[0] == 'view') {
    // The view arguments are what remains after the 1st and 2nd entries are
    // removed from $args
    $view_args = $args;
    array_shift($view_args);
    array_shift($view_args);
    // load the view 
    $view = views_get_view($args[1]);
    if ($view) {
      // set active display on the view
      $view->set_display($args[2]);
      // set any needed arguments
      $view->set_arguments($view_args);
      // execute the view
      $view->execute();
      if ($view->executed) {
        $xml = juicebox_get_xml_from_view($view);
        $got_result = TRUE;
      }
    }
  }
  // If we did not get any XML result take any special actions needed.
  if (!$got_result) {
    // Make it clear to Juicebox that we don't have any XML to give it.
    drupal_add_http_header('Status', '404 Not Found');
  }
  else {
    drupal_add_http_header('Content-Type', 'text/xml');
    print($xml);
  }
}


/**
 * Implements hook_views_api().
 */
function juicebox_views_api() {
  return array(
    'api' => 2.0,
  );
}


/**
 * Implements hook_theme().
 */
function juicebox_theme() {
  return array(
    // Theme hook to generate final Juicebox XML
    'juicebox_config_xml' => array(
      'variables' => array('options' => array(), 'images' => array()),
      'path' => drupal_get_path('module', 'juicebox') . '/themes',
      'file' => 'juicebox.theme.inc',
    ),
  );
}


// Generate the config.xml data for a Juicebox gallery from a view object
function juicebox_get_xml_from_view($view) {
  $view_options = $view->style_options;
  $options = array();
  $options[] = 'galleryTitle="' . check_plain($view->human_name) . '"';
  $options[] = 'galleryWidth="' . check_plain($view->style_options['width']) . '"';
  $options[] = 'galleryHeight="' . check_plain($view->style_options['height']) . '"';
  $custom_options = explode("\n", filter_xss(trim($view->style_options['advanced']['config'])));
  $options = array_merge($options, $custom_options);
  $images = array();
  foreach ($view->result as $row_index => $row) {
    // Get the main image source
    $field_image_name = "field_{$view_options['image_field']}";
    $field_image_uri = $row->{$field_image_name}[0]['raw']['uri'];
    if (!empty($view_options['image_field_style'])) {
      $image_src = image_style_url($view_options['image_field_style'], $field_image_uri);
    }
    else {
      $image_src = file_create_url($field_image_uri);
    }
    // Get the thumbnail source
    $field_thumb_name = "field_{$view_options['thumb_field']}";
    $field_thumb_uri = $row->{$field_thumb_name}[0]['raw']['uri'];
    if (!empty($view_options['thumb_field_style'])) {
      $thumb_src = image_style_url($view_options['thumb_field_style'], $field_thumb_uri);
    }
    else {
      $thumb_src = file_create_url($field_image_uri);
    }
    // We use $view->render_field in the code below to provide an easy way
    // to get the raw rendered output for each individual non-image field. This
    // gives us a consistent result no matter what the field type is. However,
    // there may more efficient ways to do this (sans a "render" call). For now
    // while using $view->render_field, note that we have to be sure that the
    // CURRENT row index is set on the main view object, otherwise rendering
    // errors may result in certain situations.
    $view->row_index = $row_index;
    $title = $view->render_field($view_options['title_field'], $row_index);
    $caption = $view->render_field($view_options['caption_field'], $row_index);
    // Add each image to the xml
    $images[$row_index]['image_src'] = $image_src;
    $images[$row_index]['thumb_src'] = $thumb_src;
    $images[$row_index]['title'] = $title;
    $images[$row_index]['caption'] = $caption;
  }
  $data = array('options' => $options, 'images' => $images);
  // Theme the data as juicebox XML
  $xml = theme('juicebox_config_xml', $data);
  return $xml;
}


/**
 * Implements hook_libraries_info().
 */
function juicebox_libraries_info() {
  $libraries['juicebox'] = array(
    'name' => 'Juicebox',
    'vendor url' => 'http://www.juicebox.net/',
    'download url' => 'http://www.juicebox.net/download/',
    'version arguments' => array(
      'file' => 'juicebox.js',
      'pattern' => '/Juicebox-([0-9a-zA-Z\.\ -]+)/',
      'lines' => 5,
    ),
    'files' => array(
      'js' => array('juicebox.js'),
    ),
  );
  return $libraries;
}


/**
 * Implements hook_help().
 */
function juicebox_help($path, $arg) {

}


/*********** To be implimented if an XML caching solution is setup*********/
/**
 * Implements hook_flush_caches().

function juicebox_flush_caches() {
  if (db_table_exists('cache_juicebox')) {
    return array('cache_juicebox');
  }
}
*/
