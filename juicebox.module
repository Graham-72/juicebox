<?php

/**
 * @file
 * Provides Drupal integration with the Juicebox library.
 */


/**
 * Implements hook_menu().
 */
function juicebox_menu() {
  $items = array();
  // Add menu item that produces the "config.xml" data that is linked to a
  // specific view or entity field.
  $items['juicebox/xml/%'] = array(
    'title' => 'Juicebox XML from view',
    'description' => '',
    'page callback' => 'juicebox_page_xml',
    'page arguments' => array(2),
    // For efficiency will check access in parallel to other logic in the 
    // callback function, so we don't limit any access here.
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * Implements hook_theme().
 */
function juicebox_theme() {
  return array(
    // Theme hook to generate final Juicebox XML.
    'juicebox_config_xml' => array(
      'variables' => array('options' => array(), 'images' => array()),
      'path' => drupal_get_path('module', 'juicebox') . '/themes',
      'file' => 'juicebox.theme.inc',
    ),
    // Theme hook to generate embed markup for a Juicebox gallery.
    'juicebox_embed_markup' => array(
      'variables' => array('gallery_id' => '', 'config_url_path' => '', 'style_options' => array()),
      'path' => drupal_get_path('module', 'juicebox') . '/themes',
      'file' => 'juicebox.theme.inc',
    ),
    // Note that this module also uses themes for view plugins, but those hooks
    // are registered through the views API and not here in hook_theme().
  );
}


/**
 * Implements hook_libraries_info().
 */
function juicebox_libraries_info() {
  $libraries['juicebox'] = array(
    'name' => 'Juicebox',
    'vendor url' => 'http://www.juicebox.net/',
    'download url' => 'http://www.juicebox.net/download/',
    'version arguments' => array(
      'file' => 'juicebox.js',
      'pattern' => '/Juicebox.([0-9a-zA-Z\.\ -]+)/',
      'lines' => 5,
    ),
    'files' => array(
      // Note that we do not want the Juicebox library javascript to be
      // aggregated by Drupal (set preprocess option = FALSE). This is because
      // some supporting library CSS files must be at a specific location 
      // RELATIVE to to the main js file. Aggregation breaks this.
      'js' => array('juicebox.js' => array('preprocess' => FALSE)),
    ),
  );
  return $libraries;
}


/**
 * Implements hook_views_api().
 */
function juicebox_views_api() {
  return array(
    'api' => 3.0,
  );
}


/**
 * Menu callback: generate Juicebox XML.
 * 
 * Note that this callback directly sets page headers and prints the XML result
 * (if one can successfully be rendered).
 * 
 * @see: juicebox_menu()
 */
function juicebox_page_xml() {
  $got_result = FALSE;
  // We don't always know exactly how many args are being passed, so we have to
  // fetch them programmatically with func_get_args()
  $args = func_get_args();
  // If this XML request is related to a view, we first have to re-construct the
  // view before we can extract the needed XML data.
  if ($args[0] == 'view') {
    // Set key variables from the path.
    $view_name = $args[1];
    $view_display = $args[2];
    // The view arguments are what remains after the first 3 entries are
    // removed from $args
    $view_args = array_slice($args, 3);
    // load the view 
    $view = views_get_view($view_name);
    if ($view) {
      // set active display on the view
      $view->set_display($view_display);
      // set any needed arguments
      $view->set_arguments($view_args);
      // execute the view
      $view->execute();
      if ($view->executed) {
        // Check that this user actually has access to the view we are building
        // the XML for. Kill callback with "access denied" if not.
        if (!$view->access($view_display)) {
          return MENU_ACCESS_DENIED;
        }
        // We now have the variables we need to build the XML.
        $got_result = TRUE;
        $xml = juicebox_get_xml_from_view($view);
      }
    }
  }
  // If this XML request is related to an entity field, we first have to 
  // re-construct the entity and the field details before we can extract the 
  // needed XML data.
  if ($args[0] == 'entity') {
    // Set key variables from the path.
    $entity_type = $args[1];
    $entity_id = $args[2];
    $field_name = $args[3];
    $display_name = $args[4];
    // Build the entity.
    $entities = entity_load($entity_type, array($entity_id));
    if (isset($entities[$entity_id])) {
      $entity = $entities[$entity_id];
      // Check that this user actually has access to the field we are building
      // the XML for. Kill callback with "access denied" if not.
      if (!field_access('view', $field_name, $entity_type, $entity)) {
        return MENU_ACCESS_DENIED;
      }
      $items = field_get_items($entity_type, $entity, $field_name);
      if ($items) {
        // See if we have a bundle set. Initially assume we don't.
        $bundle = $entity_type;
        if (isset($entity->type)) {
          $bundle = $entity->type;
        }
        $instance_info = field_info_instance($entity_type, $field_name, $bundle);
        if (!empty($instance_info['display'])) {
          // Try to get the specific display settings. Initially assume the
          // default display settings.
          $settings = $instance_info['display']['default']['settings'];
          if (isset($instance_info['display'][$display_name]['settings'])) {
            $settings = $instance_info['display'][$display_name]['settings'];
          }
          // We now have the variables we need to build the XML.
          $got_result = TRUE;
          $xml = juicebox_get_xml_from_entity($items, $settings);
        }
      }
    }
  }
  // If we did not get any XML result take any special actions needed.
  if (!$got_result) {
    // Make it clear to Juicebox that we don't have any XML to give it.
    drupal_add_http_header('Status', '404 Not Found');
  }
  else {
    drupal_add_http_header('Content-Type', 'text/xml');
    print($xml);
  }
}


/**
 * Generate XML data for a Juicebox gallery from a view object.
 *
 * @param object $view
 *   A fully built/executed view object.
 * @return string
 *   Fully renderd and themed XML data for a Juicebox gallery.
 */
function juicebox_get_xml_from_view($view) {
  // Initialize the "settings" values before working with them. This is
  // required for legacy support.
  $settings = _juicebox_init_display_settings($view->style_plugin->options);
  $images = array();
  foreach ($view->result as $row_index => $row) {
    // Get the main image sources. Note that the image link source should always
    // point to the highest resolution version that's available.
    $field_image_name = "field_{$settings['image_field']}";
    $field_image_uri = $row->{$field_image_name}[0]['raw']['uri'];
    if (!empty($settings['image_field_style'])) {
      $image_src = image_style_url($settings['image_field_style'], $field_image_uri);
      $image_link_src = file_create_url($field_image_uri);
    }
    else {
      $image_src = file_create_url($field_image_uri);
      $image_link_src = $image_src;
    }
    // Get the thumbnail source
    $field_thumb_name = "field_{$settings['thumb_field']}";
    $field_thumb_uri = $row->{$field_thumb_name}[0]['raw']['uri'];
    if (!empty($settings['thumb_field_style'])) {
      $thumb_src = image_style_url($settings['thumb_field_style'], $field_thumb_uri);
    }
    else {
      $thumb_src = file_create_url($field_image_uri);
    }
    // We use $view->render_field in the code below to provide an easy way
    // to get the raw rendered output for each individual non-image field. This
    // gives us a consistent result no matter what the field type is. However,
    // there may more efficient ways to do this (sans a "render" call). For now
    // while using $view->render_field, note that we have to be sure that the
    // CURRENT row index is set on the main view object, otherwise rendering
    // errors may result in certain situations.
    $view->row_index = $row_index;
    $title = $view->render_field($settings['title_field'], $row_index);
    $caption = $view->render_field($settings['caption_field'], $row_index);
    // Add each image to the xml
    $images[$row_index]['image_src'] = $image_src;
    $images[$row_index]['image_link_src'] = $image_link_src;
    $images[$row_index]['thumb_src'] = $thumb_src;
    $images[$row_index]['title'] = $title;
    $images[$row_index]['caption'] = $caption;
  }
  // Get the Juicebox library-specific options.
  $jlib_options = array();
  if ($settings['show_title']) {
    $jlib_options[] = 'galleryTitle="' . check_plain($view->human_name) . '"';
  }
  $jlib_options = array_merge($jlib_options, _juicebox_get_lib_options($settings));
  $data = array('options' => $jlib_options, 'images' => $images);
  // Theme the data as juicebox XML
  $xml = theme('juicebox_config_xml', $data);
  return $xml;
}


/**
 * Generate XML data for a Juicebox gallery from an entity image field.
 *
 * @param array $items
 *   A list of image items from an image field that is part of an entity. This
 *   will typically be constructed with field_get_items().
 * @param array $settings
 *   A associative array of field formatter settings specific to this gallery
 *   display.
 * @return string
 *   Fully renderd and themed XML data for a Juicebox gallery.
 */
function juicebox_get_xml_from_entity($items, $settings) {
  // Initialize the "settings" values before working with them. This is
  // required for legacy support.
  $settings = _juicebox_init_display_settings($settings);
  // Prepare images
  $images = array();
  foreach ($items as $id => $item) {
    // Get the main image sources. Note that the image link source should always
    // point to the highest resolution version that's available.
    if (!empty($settings['image_style'])) {
      $image_src = image_style_url($settings['image_style'], $item['uri']);
      $image_link_src = file_create_url($item['uri']);
    }
    else {
      $image_src = file_create_url($item['uri']);
      $image_link_src = $image_src;
    }
    // Get thumb source
    if (!empty($settings['thumb_style'])) {
      $thumb_src = image_style_url($settings['thumb_style'], $item['uri']);
    }
    else {
      $thumb_src = file_create_url($item['uri']);
    }
    // Get the image caption.
    $caption = '';
    if (!empty($item[$settings['caption_source']])) {
      $caption = check_plain($item[$settings['caption_source']]);
    }
    // Get the image title.
    $title = '';
    if (!empty($item[$settings['title_source']])) {
      $title = check_plain($item[$settings['title_source']]);
    }
    // Add each image to the xml
    $images[$id]['image_src'] = $image_src;
    $images[$id]['image_link_src'] = $image_link_src;
    $images[$id]['thumb_src'] = $thumb_src;
    $images[$id]['title'] = $title;
    $images[$id]['caption'] = $caption;
  }
  // Get the Juicebox library-specific options.
  $jlib_options = _juicebox_get_lib_options($settings);
  $data = array('options' => $jlib_options, 'images' => $images); 
  // Theme the data as juicebox XML
  $xml = theme('juicebox_config_xml', $data);
  return $xml;
}


/**
 * Helper to get all Juicebox library conf options from the display settings.
 * 
 * This is used in preparation for generating XML output. Some Juicebox XML
 * configuration options are set via a GUI and others are set as manual strings.
 * This function merges all of these values into one array. 
 * 
 * @param array $settings
 *   An associative array containing all the settings for a Juicebox gallery.
 * @return array
 *   An array of Juicebox XML configuration options in the form
 *   optionName=optionValue
 */
function _juicebox_get_lib_options($settings) {
  $custom_options = array();
  // Get the string options set via the GUI.
  foreach (array('jlib_galleryWidth', 'jlib_galleryHeight', 'jlib_backgroundColor') as $name) {
    if (!empty($settings[$name])) {
      $name_real = str_replace('jlib_', '', $name);
      $custom_options[strtolower($name_real)] = $name_real . '="' . trim(check_plain($settings[$name])) . '"';
    }
  }
  // Get the bool options set via the GUI.
  foreach (array('jlib_showOpenButton', 'jlib_showExpandButton', 'jlib_showThumbsButton') as $name) {
    $name_real = str_replace('jlib_', '', $name);
    $custom_options[strtolower($name_real)] = $name_real . '=' . ($settings[$name] ? '"TRUE"' : '"FALSE"');
  }
  // Merge-in the manually assigned options making sure they take priority
  // over any conflicting GUI options.
  $manual_options = explode("\n", filter_xss($settings['manual_config']));
  foreach ($manual_options as $option) {
    $option = trim($option);
    if (!empty($option)) {
      // We assume that each manual option has been properly validated to be in
      // the form of optionName=optionValue.
      list($name, $value) = explode('=', $option);
      $name = trim(strtolower($name));
      // See if the manual option is also a GUI option. If so, remove the GUI
      // option.
      $match = array_search($name, $custom_options);    
      if ($match) {
        unset($custom_options[$match]);
      }
      $custom_options[$name] = $option;
    }
  }
  return $custom_options;
}


/**
 * Utility function to modify Juicebox settings after they are loaded from
 * Drupal but before they are used in any Juicebox module logic.
 * 
 * This is a central place to modfy the $settings arrays that describe the
 * configuration for each Juicebox gallery (for both field formatters and views
 * displays). Note that for views we could implement an override of
 * views_plugin_style::init and do these modifications there, but as no such
 * option exists for field formatters we just use this ad hoc utilty for both
 * instead.
 * 
 * @param array $settings
 *   An associative array containing all the settings for a Juicebox gallery.
 * @return array
 *   A modified version of the input settings array.
 */
function _juicebox_init_display_settings($settings) {
  // Here we check for cases where we may be loading settings stored with an
  // older version of the module. In these cases the settings "schema" may be
  // different (i.e. the array is nested differently), so we need to adjust
  // accordingly. Note that this is done here "realtime" instead of via a
  // one-time hook_update_n process because this is the only way to correctly
  // deal with views and fields being loaded from code (exported). Once "old"
  // settings are re-saved (under the new "schema"), these checks no longer do
  // anything. See also: http://drupal.org/node/1965786
  if (!empty($settings['width'])) {
    $settings['jlib_galleryWidth'] = $settings['width'];
  }
  if (!empty($settings['height'])) {
    $settings['jlib_galleryHeight'] = $settings['height'];
  }
  if (!empty($settings['advanced']['config'])) {
    $settings['manual_config'] = $settings['advanced']['config'];
  }
  if (!empty($settings['advanced']['custom_parent_classes'])) {
    $settings['custom_parent_classes'] = $settings['advanced']['custom_parent_classes'];
  }
  return $settings;
}


/******************************************************************************
 * The following functions are common form helper functions that are used by
 * both the field formetter and the views plugin.
 ******************************************************************************/


/**
 * Helper to add common elements to Juicebox configuration forms.
 * 
 * Both the field formatter and view plugin share some common configuration
 * options and structures. These are merged into the appropriate forms via a
 * call to this function.
 * 
 * @param array $form
 *   The Drupal form array that common elements should be added to.
 * @param array $settings
 *   An associative array containing all the settings for a Juicebox gallery
 *   (used to set default values).
 * @param array $parents_root
 *   A numerically keyed array representing the tree of form elements that
 *   should be used as "parents" for the SAVED values. This is used to set the
 *   #parents value of form elements that appear in fieldsets. We want our
 *   saved values to be in a flat structure even though the form uses fieldsets
 *   and requires all elements to utilize a default #tree setting of TRUE. 
 * @return array
 *   The merged form array.
 */
function _juicebox_common_form_elements($form, $settings, $parents_root) {
  $form['juicebox_config'] = array(
    '#type' => 'fieldset',
    '#title' => t('Juicebox Library Configuration'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => '<p>' . t('The following configuration options are specific to the Juicebox javascript library itself.') . '</p>',
    '#weight' => 10,
  );
  $form['juicebox_config']['jlib_galleryWidth'] = array(
    '#type' => 'textfield',
    '#title' => t('Gallery Width'),
    '#default_value' => $settings['jlib_galleryWidth'],
    '#description' => t('Set the gallery width in a standard numeric format (such as 100% or 300px).'),
    '#element_validate' => array('_juicebox_element_validate_dimension'),
    '#parents' => array_merge($parents_root, array('jlib_galleryWidth')),
  );
  $form['juicebox_config']['jlib_galleryHeight'] = array(
    '#type' => 'textfield',
    '#title' => t('Gallery Heigth'),
    '#default_value' => $settings['jlib_galleryHeight'],
    '#description' => t('Set the gallery height in a standard numeric format (such as 100% or 300px).'),
    '#element_validate' => array('_juicebox_element_validate_dimension'),
    '#parents' => array_merge($parents_root, array('jlib_galleryHeight')),
  );
  $form['juicebox_config']['jlib_backgroundColor'] = array(
    '#type' => 'textfield',
    '#title' => t('Background Color'),
    '#default_value' => $settings['jlib_backgroundColor'],
    '#description' => t('Gallery background color as a CSS3 color value (such as #FF00FF or rgba(10,50,100,0.7).'),
    '#parents' => array_merge($parents_root, array('jlib_backgroundColor')),
  );
  $form['juicebox_config']['jlib_showOpenButton'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Open Image Button'),
    '#default_value' => $settings['jlib_showOpenButton'],
    '#description' => t('Whether to show the "Open Image" button. This will link to the full size version of the image within a new tab to facilitate downloading.'),
    '#parents' => array_merge($parents_root, array('jlib_showOpenButton')),
  );
  $form['juicebox_config']['jlib_showExpandButton'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Expand Button'),
    '#default_value' => $settings['jlib_showExpandButton'],
    '#description' => t('Whether to show the "Expand" button. Clicking this button expands the gallery to fill the browser window.'),
    '#parents' => array_merge($parents_root, array('jlib_showExpandButton')),
  );
  $form['juicebox_config']['jlib_showThumbsButton'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Thumbs Button'),
    '#default_value' => $settings['jlib_showThumbsButton'],
    '#description' => t('Whether to show the "Toggle Thumbnails" button.'),
    '#parents' => array_merge($parents_root, array('jlib_showThumbsButton')),
  );
  $form['juicebox_config']['manual_config'] = array(
    '#type' => 'textarea',
    '#title' => t('Manual configuraton options'),
    '#default_value' => $settings['manual_config'],
    '#description' => t('Define any additional configuration options that should be used in this gallery (see: http://www.juicebox.net/support/config_options/).<br/>Add one per line in the format <strong>optionName="optionValue"</strong>.<br/>Options set here always take precedence over those set above is there is a conflict.'),
    '#element_validate' => array('_juicebox_element_validate_config'),
    '#parents' => array_merge($parents_root, array('manual_config')),
  );
  $form['advanced'] = array(  
    '#type' => 'fieldset',
    '#title' => t('Advanced Options'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => 20,
  );
  $form['advanced']['custom_parent_classes'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom Classes for Parent Container'),
    '#default_value' => $settings['custom_parent_classes'],
    '#description' => t('Define any custom classes that should be added to the parent container within the Juicebox embed markup.<br/>This can be handy if you want to apply more advanced styling or dimensioning rules to this gallery via CSS. Enter as space-separated values.'),
    '#parents' => array_merge($parents_root, array('custom_parent_classes')),
  );
  return $form;
}


/**
 * Form validation callback: validate width/height inputs.
 * 
 * @see: _juicebox_common_form_elements
 */
function _juicebox_element_validate_dimension($element, &$form_state, $form) {
  if (!preg_match('/^[0-9]+?(%|px|em|in|cm|mm|ex|pt|pc)$/u', $element['#value'])) {
    form_error($element, t('Please ensure that you width and height values are entered in a standard numeric format (such as <strong>100%</strong> or <strong>300px</strong>).'));
  }
}


/**
 * Form validation callback: validate Juicebox configuration options.
 * 
 * @see: _juicebox_common_form_elements
 */
function _juicebox_element_validate_config($element, &$form_state, $form) {
  // We are looking for input in the format of: optionName="optionValue".
  // The check here is not too strict, it is just meant to catch general 
  // formatting issues.
  $custom_options = explode("\n", $element['#value']);
  foreach($custom_options as $key => $option) {
    $line_number = $key + 1;
    if (!empty($option)) {
      if (!preg_match('/^[A-Za-z0-9]+?="[^"]+?"\ *$/u', $option)) {
        form_error($element, t('One of your manual configuration options appears to be formatted incorrectly. Please check line @line of this field and ensure that you are using the format <strong>optionName="optionValue"</strong> and that all spaces have been removed.', array('@line' => $line_number)));
      }
    }
  }
}


/******************************************************************************
 * The following functions relate specifically to the implementation 
 * of the Juicebox field formatter.
 ******************************************************************************/


/**
 * Implements hook_field_formatter_info().
 * 
 * Add juicebox_formatter formatter.
 */
function juicebox_field_formatter_info() {
  $formatters = array(
    'juicebox_formatter' => array(
      'label' => t('Juicebox Gallery'),
      'field types' => array('image'),
      'settings' => array(
        'image_style' => '',
        'thumb_style' => 'thumbnail',
        'caption_source' => 'alt',
        'title_source' => 'title',
        'jlib_galleryWidth' => '100%',
        'jlib_galleryHeight' => '100%',
        'jlib_backgroundColor' => '#222222',
        'jlib_showOpenButton' => 1,
        'jlib_showExpandButton' => 1,
        'jlib_showThumbsButton' => 1,
        'manual_config' => '',
        'custom_parent_classes' => '',
      ),
    ),
  );
  return $formatters;
}


/**
 * Implements hook_field_formatter_settings_form().
 */
function juicebox_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $form = array();
    // Get available image style presets
  $presets = image_style_options(FALSE);
  // Initialize the "settings" values before working with them. This is
  // required for legacy support.
  $settings = _juicebox_init_display_settings($instance['display'][$view_mode]['settings']);

  $form['image_style'] = array(
    '#type' => 'select',
    '#title' => t('Main Image Style'),
    '#default_value' => $settings['image_style'],
    '#description' => t('Choose the style formatter for the main image.'),
    '#options' => $presets,
    '#empty_option' => t('None (original image)'),
  );
  $form['thumb_style'] = array(
    '#type' => 'select',
    '#title' => t('Thumbnail Style'),
    '#default_value' => $settings['thumb_style'],
    '#description' => t('Choose the style formatter for the thumbnail.'),
    '#options' => $presets,
    '#empty_option' => t('None (original image)'),
  );
  $form['caption_source'] = array(
    '#type' => 'select',
    '#title' => t('Caption Source'),
    '#default_value' => $settings['caption_source'],
    '#description' => t('What part of the image field data should be used for the caption information.'),
    '#options' => array(
      'alt' => t('Alternate text'),
      'title' => t('Title'),
    ),
    '#empty_option' => t('No caption'),
  );
  $form['title_source'] = array(
    '#type' => 'select',
    '#title' => t('Title Source'),
    '#default_value' => $settings['title_source'],
    '#description' => t('What part of the image field data should be used for the title information.'),
    '#options' => array(
      'alt' => t('Alternate text'),
      'title' => t('Title'),
    ),
    '#empty_option' => t('No title'),
  );
  // Also add the "common" form elements.
  $parents_root = array('fields', $field['field_name'], 'settings_edit_form', 'settings');
  $form = _juicebox_common_form_elements($form, $settings, $parents_root);
  return $form;
}


/**
 * Implements hook_field_formatter_view().
 */
function juicebox_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // If there are no images, don't do anything else.
  if (empty($items)) {
    return;
  }
  $field_name = $instance['field_name'];
  $entity_type_info = entity_get_info($entity_type);
  $entity_id = $entity->{$entity_type_info['entity keys']['id']};
  // Initialize the "settings" values before working with them. This is
  // required for legacy support.
  $settings = _juicebox_init_display_settings($display['settings']);
  // Load the juicebox javascript.
  libraries_load('juicebox');
  // We need to get the display name to pass as part of our XML path. Though
  // we have access to the actaul $display array, it does not look like we
  // have access to the actaul display NAME in this scope. We do have access to 
  // a list of ALL displays in $instanace though, so iterate though them to 
  // find a match to the settings in $display. This seems SUPER CLUNKY, but 
  // might be the only way.
  $display_name = 'default';
  foreach ($instance['display'] as $display_key => $display_data) {
    if ($display['settings'] == $display_data['settings']) {
      $display_name = $display_key;
    }
  }
  // Generate a unique ID that can be used to identify this entity when
  // fetching the XML.
  $xml_path = 'entity/' . $entity_type . '/' . $entity_id . '/' . $field_name . '/' . $display_name;
  $element[0] = array(
    '#theme' => 'juicebox_embed_markup',
    '#gallery_id' => str_replace('/', '-', $xml_path),
    '#config_url_path' => url('juicebox/xml/' . $xml_path),
    '#style_options' => $settings,
  );
  return $element;
}


/**
 * Implements hook_field_formatter_settings_summary().
 */
function juicebox_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $settings_display = array();
  // Image style setting.
  if (!empty($settings['image_style'])) {
    $style = $settings['image_style'];
  }
  else {
    $style = t('Original Image');
  }
  $settings_display[] = t("Image style: @style", array('@style' => $style)); 
  // Thumb style setting.
  if (!empty($settings['thumb_style'])) {
    $style = $settings['thumb_style'];
  }
  else {
    $style = t('Original Image');
  }
  $settings_display[] = t("Thumbnail style: @style", array('@style' => $style));
  // Define display options for caption and title source.
  $options = array(
    'alt' => t('Alternate text'),
    'title' => t('Title'),
  );
  // Caption source setting.
  if (!empty($settings['caption_source'])) {
    $source = $options[$settings['caption_source']];
  }
  else {
    $source = t('None');
  }
  $settings_display[] = t("Caption source: @source", array('@source' => $source));
  // Title source setting.
  if (!empty($settings['title_source'])) {
    $source = $options[$settings['title_source']];
  }
  else {
    $source = t('None');
  }
  $settings_display[] = t("Title source: @source", array('@source' => $source));
  // Add-in a note about the additional fieldsets.
  $settings_display[] = t("Additional Juicebox library configuration options may also be set.");
  $summary = implode('<br />', $settings_display);
  return $summary;
}


/*********** To be implimented if an XML caching solution is setup*********/
/**
 * Implements hook_flush_caches().

function juicebox_flush_caches() {
  if (db_table_exists('cache_juicebox')) {
    return array('cache_juicebox');
  }
}
*/
