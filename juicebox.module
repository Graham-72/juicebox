<?php

/**
 * @file
 * Provides Drupal integration with the Juicebox gallery library.
 */


/**
 * Implements hook_menu().
 */
function juicebox_menu() {
  $items = array();
  // Add menu item that produces the "config.xml" data that is linked to a
  // specific view.
  $items['juicebox/xml/view/%'] = array(
    'title' => 'Juicebox XML from view',
    'description' => '',
    'page callback' => 'juicebox_page_xml_view',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}


// Callback for the menu item that generates Juicebox XML linked to a specific
// view. This simply fetches the cached XML that was already created when the
// view itself was rendered.
function juicebox_page_xml_view($view_id) {
  //$GLOBALS['conf']['cache'] = FALSE;
  $xml = cache_get('juicebox_xml-' . $view_id, 'cache_page');
  drupal_add_http_header('Content-Type', 'text/xml');
  if (!empty($xml)) {
    print($xml->data);
  }
}


/**
 * Implements hook_views_api().
 */
function juicebox_views_api() {
  $path = drupal_get_path('module', 'juicebox');
  return array(
    'api' => 2.0,
  );
}


// Render the Juicebox XML from a view object that makes use of our view plugins 
function juicebox_render_xml_from_view($view) {
  $options = $view->style_options; 
  $xml = '<?xml version="1.0" encoding="UTF-8"?>' . "\n";
  $xml .= '<juiceboxgallery' . "\n";
  $xml .= '  galleryTitle="' . $view->human_name .'"' . "\n";
  $xml .= '  galleryWidth="' . $view->style_options['width'] .'"' . "\n";
  $xml .= '  galleryHeight="' . $view->style_options['height'] .'"' . "\n";
  $xml .= '  ' . $view->style_options['advanced']['config'] . "\n";
  $xml .= '>' . "\n";
  foreach ($view->result as $row_index => $row) {
    // We use $view->render_field in the code below to provide an easy way
    // to get the raw rendered output for each individual field. However, this 
    // does seem redundant as surely views has already rendered/stored these
    // values somewhere (I'm just not sure how otherwsie to access them on a 
    // row-by-row and field-by-field basis). For now, while using
    // $view->render_field, we have to be sure that the CURRENT row index is
    // set on the main view object, otherwise rendering errors may result in
    // certain situations.
    $view->row_index = $row_index;
    // Get image specific values from the view data
    $image_src = juicebox_get_img_src($view->render_field($options['image_field'], $row_index));
    $thumb_src = juicebox_get_img_src($view->render_field($options['thumb_field'], $row_index));
    $title = $view->render_field($options['title_field'], $row_index);
    $caption = $view->render_field($options['caption_field'], $row_index);
    // Add each image to the xml
    $xml .= '  <image imageURL="' . $image_src . '"' . "\n";
    $xml .= '    thumbURL="' . $thumb_src . '"' . "\n";
    $xml .= '    linkURL="' . $image_src . '"'. "\n";
    $xml .= '    linkTarget="_blank">'. "\n";
    $xml .= '    <title>' . $title . '</title>'. "\n";
    $xml .= '    <caption><![CDATA[' . $caption . ']]></caption>' . "\n";
    $xml .= '  </image>'. "\n";    
  }
  $xml .= '</juiceboxgallery>';
  return $xml;
}


// Helper function to get the src value from the first img tag in the given 
// markup
function juicebox_get_img_src($markup) {
  $img_src = '';
  $parser = xml_parser_create();
  xml_parse_into_struct($parser, $markup, $values);
  foreach ($values as $key => $val) {
    if ($val['tag'] == 'IMG') {
      $img_src = $val['attributes']['SRC'];
      break;
    }
  }
  return $img_src;
}




function juicebox_libraries_info() {
  $libraries['juicebox'] = array(
    'name' => 'Juicebox',
    'vendor url' => 'http://www.juicebox.net/',
    'download url' => 'http://www.juicebox.net/download/',
    'version' => 1,
    'files' => array(
      'js' => array('juicebox.js'),
    ),
 );
 return $libraries;
}


/**
 * Implements hook_help().
 */
function juicebox_help($path, $arg) {
  
}
